import { BoardTextConverter } from './board-text-converter';
import { HintProvider } from './hint-provider';
import { expectBoard } from './test-expectations.spec';
import { Board } from './models/board';
import { Coordinate } from './models/coordinate';

describe('HintProvider', () => {
  describe('SetCandidatesStrategy', () => {
    it('should set candidates in all non-empty cells on the board', () => {
      const { provider, board } = createHintProviderForBoard(`
                +-----+------+-----+----+
                |     | 1234 | 123 |    |
                +-----+------+-----+----+
                | 123 |      | 123 |    |
                +--^--+------+-----+----+
                | !2  |  12  | !4  > !3 |
                +-----+------+-----+-v--+
                |     >  3   | !1  <    |
                +-----+------+-----+----+`);

      const hasChanges = provider.runAtBoard();

      expect(hasChanges).toBeTruthy();
      expect(provider.explanationText).toBe(`Placed candidates in 6 empty cells.`);
      expectBoard(
        board,
        `
                +------+------+-----+------+
                | 1234 | 1234 | 123 | 1234 |
                +------+------+-----+------+
                | 123  | 1234 | 123 | 1234 |
                +--^---+------+-----+------+
                |  !2  |  12  | !4  >  !3  |
                +------+------+-----+--v---+
                | 1234 >  3   | !1  < 1234 |
                +------+------+-----+------+`
      );
    });

    it('should set candidates in single cell', () => {
      const { provider, board } = createHintProviderForBoard(`
                +-----+------+-----+----+
                |     | 1234 | 123 |    |
                +-----+------+-----+----+
                | 123 |      | 123 |    |
                +--^--+------+-----+----+
                | !2  |  12  | !4  > !3 |
                +-----+------+-----+-v--+
                |     >  3   | !1  <    |
                +-----+------+-----+----+`);

      const hasChanges = provider.runAtCoordinate(Coordinate.fromText('B4', board.size));

      expect(hasChanges).toBeTruthy();
      expect(provider.explanationText).toBe(`Placed candidates in empty cell B4.`);
      expectBoard(
        board,
        `
                +-----+------+-----+------+
                |     | 1234 | 123 |      |
                +-----+------+-----+------+
                | 123 |      | 123 | 1234 |
                +--^--+------+-----+------+
                | !2  |  12  | !4  >  !3  |
                +-----+------+-----+--v---+
                |     >  3   | !1  <      |
                +-----+------+-----+------+`
      );
    });
  });

  describe('PromoteStrategy', () => {
    it('should promote single-digit candidates in all cells on the board', () => {
      const { provider, board } = createHintProviderForBoard(`
                +------+------+-----+------+------+
                | 234  > 123  | 234 >  12  |  #5  |
                +------+------+-----+------+------+
                | 1234 <  5   | 23  >  12  | 1234 |
                +------+------+--^--+------+------+
                |  2   | 1234 | 34  | 1245 | 1234 |
                +------+------+-----+------+------+
                |  1   <  2   | !5  |  #3  | 124  |
                +------+--^---+-----+------+------+
                | 2345 |  34  | !1  | 245  |  2   |
                +------+------+-----+------+------+`);

      const hasChanges = provider.runAtBoard();

      expect(hasChanges).toBeTruthy();
      expect(provider.explanationText).toBe(`Promoted 5 single-candidate cells.`);
      expectBoard(
        board,
        `
                +------+------+-----+------+------+
                | 234  > 123  | 234 >  12  |  #5  |
                +------+------+-----+------+------+
                | 1234 <  !5  | 23  >  12  | 1234 |
                +------+------+--^--+------+------+
                |  !2  | 1234 | 34  | 1245 | 1234 |
                +------+------+-----+------+------+
                |  !1  <  !2  | !5  |  #3  | 124  |
                +------+--^---+-----+------+------+
                | 2345 |  34  | !1  | 245  |  !2  |
                +------+------+-----+------+------+`
      );
    });

    it('should promote single-digit candidate in single cell', () => {
      const { provider, board } = createHintProviderForBoard(`
                +------+------+-----+------+------+
                | 234  > 123  | 234 >  12  |  #5  |
                +------+------+-----+------+------+
                | 1234 <  5   | 23  >  12  | 1234 |
                +------+------+--^--+------+------+
                |  2   | 1234 | 34  | 1245 | 1234 |
                +------+------+-----+------+------+
                |  1   <  2   | !5  |  #3  | 124  |
                +------+--^---+-----+------+------+
                | 2345 |  34  | !1  | 245  |  2   |
                +------+------+-----+------+------+`);

      const hasChanges = provider.runAtCoordinate(Coordinate.fromText('E5', board.size));

      expect(hasChanges).toBeTruthy();
      expect(provider.explanationText).toBe(`Promoted single-candidate cell E5.`);
      expectBoard(
        board,
        `
                +------+------+-----+------+------+
                | 234  > 123  | 234 >  12  |  #5  |
                +------+------+-----+------+------+
                | 1234 <  5   | 23  >  12  | 1234 |
                +------+------+--^--+------+------+
                |  2   | 1234 | 34  | 1245 | 1234 |
                +------+------+-----+------+------+
                |  1   <  2   | !5  |  #3  | 124  |
                +------+--^---+-----+------+------+
                | 2345 |  34  | !1  | 245  |  !2  |
                +------+------+-----+------+------+`
      );
    });
  });

  describe('NakedSingleStrategy', () => {
    it('should eliminate single candidate in all cells on the board', () => {
      const { provider, board } = createHintProviderForBoard(`
                +------+------+-----+------+------+
                | 234  > 123  | 234 >  12  |  #5  |
                +------+------+-----+------+------+
                | 1234 <  !5  | 23  >  12  | 1234 |
                +------+------+--^--+------+------+
                |  !2  | 1234 | 34  | 1245 | 1234 |
                +------+------+-----+------+------+
                |  !1  <  !2  | !5  |  #3  | 124  |
                +------+--^---+-----+------+------+
                | 2345 |  34  | !1  | 245  |  !2  |
                +------+------+-----+------+------+`);

      const hasChanges = provider.runAtBoard();

      expect(hasChanges).toBeTruthy();
      expect(provider.explanationText).toBe(`Naked single (2) in cell C1 eliminated '2' from 6 other cells in related row and column.`);
      expectBoard(
        board,
        `
                +-----+-----+-----+-----+------+
                | 34  > 123 | 234 > 12  |  #5  |
                +-----+-----+-----+-----+------+
                | 134 < !5  | 23  > 12  | 1234 |
                +-----+-----+--^--+-----+------+
                | !2  | 134 | 34  | 145 | 134  |
                +-----+-----+-----+-----+------+
                | !1  < !2  | !5  | #3  | 124  |
                +-----+--^--+-----+-----+------+
                | 345 | 34  | !1  | 245 |  !2  |
                +-----+-----+-----+-----+------+`
      );
    });

    it('should eliminate single candidate from row in single cell', () => {
      const { provider, board } = createHintProviderForBoard(`
                +------+------+-----+-----+------+
                |  34  > 123  | 234 > 12  |  #5  |
                +------+------+-----+-----+------+
                |  34  <  !5  | 23  > 12  | 1234 |
                +------+------+--^--+-----+------+
                | 2345 | 1234 | 34  | 145 | 134  |
                +------+------+-----+-----+------+
                |  !1  <  !2  | !5  | #3  |  24  |
                +------+--^---+-----+-----+------+
                | 345  |  34  | !1  | 245 |  !2  |
                +------+------+-----+-----+------+`);

      const hasChanges = provider.runAtCoordinate(Coordinate.fromText('A2', board.size));

      expect(hasChanges).toBeTruthy();
      expect(provider.explanationText).toBe(`Naked single (2) in cell D2 eliminated '2' from A2.`);
      expectBoard(
        board,
        `
                +------+------+-----+-----+------+
                |  34  >  13  | 234 > 12  |  #5  |
                +------+------+-----+-----+------+
                |  34  <  !5  | 23  > 12  | 1234 |
                +------+------+--^--+-----+------+
                | 2345 | 1234 | 34  | 145 | 134  |
                +------+------+-----+-----+------+
                |  !1  <  !2  | !5  | #3  |  24  |
                +------+--^---+-----+-----+------+
                | 345  |  34  | !1  | 245 |  !2  |
                +------+------+-----+-----+------+`
      );
    });

    it('should eliminate single candidate from column in single cell', () => {
      const { provider, board } = createHintProviderForBoard(`
                +------+------+-----+-----+------+
                |  34  > 123  | 234 > 12  |  #5  |
                +------+------+-----+-----+------+
                |  34  <  !5  | 23  > 12  | 1234 |
                +------+------+--^--+-----+------+
                | 2345 | 1234 | 34  | 145 | 134  |
                +------+------+-----+-----+------+
                |  !1  <  !2  | !5  | #3  |  24  |
                +------+--^---+-----+-----+------+
                | 345  |  34  | !1  | 245 |  !2  |
                +------+------+-----+-----+------+`);

      const hasChanges = provider.runAtCoordinate(Coordinate.fromText('D5', board.size));

      expect(hasChanges).toBeTruthy();
      expect(provider.explanationText).toBe(`Naked single (2) in cell D2 eliminated '2' from D5.`);
      expectBoard(
        board,
        `
                +------+------+-----+-----+------+
                |  34  > 123  | 234 > 12  |  #5  |
                +------+------+-----+-----+------+
                |  34  <  !5  | 23  > 12  | 1234 |
                +------+------+--^--+-----+------+
                | 2345 | 1234 | 34  | 145 | 134  |
                +------+------+-----+-----+------+
                |  !1  <  !2  | !5  | #3  |  4   |
                +------+--^---+-----+-----+------+
                | 345  |  34  | !1  | 245 |  !2  |
                +------+------+-----+-----+------+`
      );
    });
  });

  describe('HiddenSingleStrategy', () => {
    it('should find hidden single in row on the board', () => {
      const { provider, board } = createHintProviderForBoard(`
                +-----+------+-------+-------+------+
                | 345 > 1234 |  345  | 1234  < 2345 |
                +-----+------+---v---+-------+------+
                | !1  | 2345 |  234  >  23   | 2345 |
                +-----+------+-------+-------+------+
                | 34  <  45  | 12345 | 12345 | 2345 |
                +--v--+------+-------+-------+--v---+
                | #2  |  34  <  45   >  134  | 134  |
                +--^--+--v---+-------+-------+------+
                | 345 | 123  | 12345 | 2345  > 1234 |
                +-----+------+-------+-------+------+`);

      const hasChanges = provider.runAtBoard();

      expect(hasChanges).toBeTruthy();
      expect(provider.explanationText).toBe(`Hidden single (5) in row of cell D3 eliminated others in this cell.`);
      expectBoard(
        board,
        `
                +-----+------+-------+-------+------+
                | 345 > 1234 |  345  | 1234  < 2345 |
                +-----+------+---v---+-------+------+
                | !1  | 2345 |  234  >  23   | 2345 |
                +-----+------+-------+-------+------+
                | 34  <  45  | 12345 | 12345 | 2345 |
                +--v--+------+-------+-------+--v---+
                | #2  |  34  <   5   >  134  | 134  |
                +--^--+--v---+-------+-------+------+
                | 345 | 123  | 12345 | 2345  > 1234 |
                +-----+------+-------+-------+------+`
      );
    });

    it('should find hidden single in row for single cell', () => {
      const { provider, board } = createHintProviderForBoard(`
                +-----+------+-------+-------+------+
                | 345 > 1234 |  345  | 1234  < 2345 |
                +-----+------+---v---+-------+------+
                | !1  | 2345 |  234  >  23   | 2345 |
                +-----+------+-------+-------+------+
                | 34  <  45  | 12345 | 12345 | 2345 |
                +--v--+------+-------+-------+--v---+
                | #2  |  34  <  45   >  134  | 134  |
                +--^--+--v---+-------+-------+------+
                | 345 | 123  | 12345 | 2345  > 1234 |
                +-----+------+-------+-------+------+`);

      const hasChanges = provider.runAtCoordinate(Coordinate.fromText('D3', board.size));

      expect(hasChanges).toBeTruthy();
      expect(provider.explanationText).toBe(`Hidden single (5) in row of cell D3 eliminated others in this cell.`);
      expectBoard(
        board,
        `
                +-----+------+-------+-------+------+
                | 345 > 1234 |  345  | 1234  < 2345 |
                +-----+------+---v---+-------+------+
                | !1  | 2345 |  234  >  23   | 2345 |
                +-----+------+-------+-------+------+
                | 34  <  45  | 12345 | 12345 | 2345 |
                +--v--+------+-------+-------+--v---+
                | #2  |  34  <   5   >  134  | 134  |
                +--^--+--v---+-------+-------+------+
                | 345 | 123  | 12345 | 2345  > 1234 |
                +-----+------+-------+-------+------+`
      );
    });

    it('should find hidden single in column on the board', () => {
      const { provider, board } = createHintProviderForBoard(`
                +------+-------+-------+-------+-------+
                | 345  > 1234  |  345  | 1234  < 2345  |
                +------+-------+---v---+-------+-------+
                | 1345 | 12345 |  234  >  123  | 12345 |
                +------+-------+-------+-------+-------+
                |  34  <  45   | 12345 | 12345 | 2345  |
                +--v---+-------+-------+-------+---v---+
                |  #2  |  34   <  45   >  134  |  134  |
                +--^---+---v---+-------+-------+-------+
                | 345  |  123  | 12345 | 2345  > 1234  |
                +------+-------+-------+-------+-------+`);

      const hasChanges = provider.runAtBoard();

      expect(hasChanges).toBeTruthy();
      expect(provider.explanationText).toBe(`Hidden single (1) in column of cell B1 eliminated others in this cell.`);
      expectBoard(
        board,
        `
                +-----+-------+-------+-------+-------+
                | 345 > 1234  |  345  | 1234  < 2345  |
                +-----+-------+---v---+-------+-------+
                |  1  | 12345 |  234  >  123  | 12345 |
                +-----+-------+-------+-------+-------+
                | 34  <  45   | 12345 | 12345 | 2345  |
                +--v--+-------+-------+-------+---v---+
                | #2  |  34   <  45   >  134  |  134  |
                +--^--+---v---+-------+-------+-------+
                | 345 |  123  | 12345 | 2345  > 1234  |
                +-----+-------+-------+-------+-------+`
      );
    });

    it('should find hidden single in column for single cell', () => {
      const { provider, board } = createHintProviderForBoard(`
                +------+-------+-------+-------+-------+
                | 345  > 1234  |  345  | 1234  < 2345  |
                +------+-------+---v---+-------+-------+
                | 1345 | 12345 |  234  >  123  | 12345 |
                +------+-------+-------+-------+-------+
                |  34  <  45   | 12345 | 12345 | 2345  |
                +--v---+-------+-------+-------+---v---+
                |  #2  |  34   <  45   >  134  |  134  |
                +--^---+---v---+-------+-------+-------+
                | 345  |  123  | 12345 | 2345  > 1234  |
                +------+-------+-------+-------+-------+`);

      const hasChanges = provider.runAtCoordinate(Coordinate.fromText('B1', board.size));

      expect(hasChanges).toBeTruthy();
      expect(provider.explanationText).toBe(`Hidden single (1) in column of cell B1 eliminated others in this cell.`);
      expectBoard(
        board,
        `
                +-----+-------+-------+-------+-------+
                | 345 > 1234  |  345  | 1234  < 2345  |
                +-----+-------+---v---+-------+-------+
                |  1  | 12345 |  234  >  123  | 12345 |
                +-----+-------+-------+-------+-------+
                | 34  <  45   | 12345 | 12345 | 2345  |
                +--v--+-------+-------+-------+---v---+
                | #2  |  34   <  45   >  134  |  134  |
                +--^--+---v---+-------+-------+-------+
                | 345 |  123  | 12345 | 2345  > 1234  |
                +-----+-------+-------+-------+-------+`
      );
    });
  });

  describe('OperatorsStrategy', () => {
    it('should find all operators on the board', () => {
      const { provider, board } = createHintProviderForBoard(`
                +-------+-------+-------+-------+------+
                | 12345 | 12345 | 12345 > 12345 | 1235 |
                +---v---+---v---+-------+-------+--^---+
                | 12345 | 12345 | 12345 | 12345 | 1235 |
                +-------+---^---+-------+-------+------+
                | 1235  | 1235  | 1235  | 1235  |  #4  |
                +-------+-------+-------+-------+--^---+
                | 12345 | 12345 < 12345 | 12345 | 1235 |
                +---v---+-------+-------+---v---+------+
                | 12345 | 12345 | 12345 | 12345 < 1235 |
                +-------+-------+-------+-------+------+`);

      const hasChanges = provider.runAtBoard();

      expect(hasChanges).toBeTruthy();
      expect(provider.explanationText).toBe(`Operators reduced candidates in 17 cells.`);
      expectBoard(
        board,
        `
                +------+-------+-------+-------+-----+
                | 2345 | 2345  | 2345  > 1234  | 123 |
                +--v---+---v---+-------+-------+--^--+
                | 1234 |  123  | 12345 | 12345 | 235 |
                +------+---^---+-------+-------+-----+
                | 1235 |  235  | 1235  | 1235  | #4  |
                +------+-------+-------+-------+--^--+
                | 2345 | 1234  < 2345  | 2345  |  5  |
                +--v---+-------+-------+---v---+-----+
                | 1234 | 12345 | 12345 | 1234  < 235 |
                +------+-------+-------+-------+-----+`
      );
    });

    it('should find vertical less-than operator pair for single cell', () => {
      const { provider, board } = createHintProviderForBoard(`
                +-------+-------+-------+-------+------+
                | 12345 | 12345 | 12345 > 12345 | 1235 |
                +---v---+---v---+-------+-------+--^---+
                | 12345 | 12345 | 12345 | 12345 | 1235 |
                +-------+---^---+-------+-------+------+
                | 1235  | 1235  | 1235  | 1235  |  #4  |
                +-------+-------+-------+-------+--^---+
                | 12345 | 12345 < 12345 | 12345 | 1235 |
                +---v---+-------+-------+---v---+------+
                | 12345 | 12345 | 12345 | 12345 < 1235 |
                +-------+-------+-------+-------+------+`);

      const hasChanges = provider.runAtCoordinate(Coordinate.fromText('B2', board.size));

      expect(hasChanges).toBeTruthy();
      expect(provider.explanationText).toBe(`Operators around B2 reduced candidates.`);
      expectBoard(
        board,
        `
                +-------+-------+-------+-------+------+
                | 12345 | 12345 | 12345 > 12345 | 1235 |
                +---v---+---v---+-------+-------+--^---+
                | 12345 |  123  | 12345 | 12345 | 1235 |
                +-------+---^---+-------+-------+------+
                | 1235  | 1235  | 1235  | 1235  |  #4  |
                +-------+-------+-------+-------+--^---+
                | 12345 | 12345 < 12345 | 12345 | 1235 |
                +---v---+-------+-------+---v---+------+
                | 12345 | 12345 | 12345 | 12345 < 1235 |
                +-------+-------+-------+-------+------+`
      );
    });

    it('should find vertical greater-than operator pair for single cell', () => {
      const { provider, board } = createHintProviderForBoard(`
                +-------+-------+-------+-------+-------+
                | 12345 > 12345 | 12345 | 12345 | 12345 |
                +---^---+-------+-------+-------+---^---+
                | 12345 | 12345 | 12345 | 12345 | 12345 |
                +-------+-------+-------+---v---+---v---+
                | 12345 | 12345 | 12345 | 12345 | 12345 |
                +-------+-------+-------+-------+-------+
                | 12345 |  #3   < 12345 | 12345 > 12345 |
                +---v---+-------+-------+-------+-------+
                | 12345 | 12345 < 12345 | 12345 > 12345 |
                +-------+-------+-------+-------+-------+`);

      const hasChanges = provider.runAtCoordinate(Coordinate.fromText('B5', board.size));

      expect(hasChanges).toBeTruthy();
      expect(provider.explanationText).toBe(`Operators around B5 reduced candidates.`);
      expectBoard(
        board,
        `
                +-------+-------+-------+-------+-------+
                | 12345 > 12345 | 12345 | 12345 | 12345 |
                +---^---+-------+-------+-------+---^---+
                | 12345 | 12345 | 12345 | 12345 |  345  |
                +-------+-------+-------+---v---+---v---+
                | 12345 | 12345 | 12345 | 12345 | 12345 |
                +-------+-------+-------+-------+-------+
                | 12345 |  #3   < 12345 | 12345 > 12345 |
                +---v---+-------+-------+-------+-------+
                | 12345 | 12345 < 12345 | 12345 > 12345 |
                +-------+-------+-------+-------+-------+`
      );
    });

    it('should find horizontal less-than operator pair for single cell', () => {
      const { provider, board } = createHintProviderForBoard(`
                +-------+-------+-------+-------+-------+
                | 12345 | 12345 | 12345 > 12345 | 12345 |
                +---v---+-------+---^---+---v---+-------+
                | 12345 > 12345 | 12345 | 12345 | 12345 |
                +-------+---v---+-------+-------+-------+
                | 12345 | 12345 | 12345 > 12345 < 12345 |
                +-------+-------+-------+-------+-------+
                | 12345 | 12345 | 12345 | 12345 | 12345 |
                +---^---+---^---+-------+-------+-------+
                | 12345 | 12345 | 12345 | 12345 |  #2   |
                +-------+-------+-------+-------+-------+`);

      const hasChanges = provider.runAtCoordinate(Coordinate.fromText('C4', board.size));

      expect(hasChanges).toBeTruthy();
      expect(provider.explanationText).toBe(`Operators around C4 reduced candidates.`);
      expectBoard(
        board,
        `
                +-------+-------+-------+-------+-------+
                | 12345 | 12345 | 12345 > 12345 | 12345 |
                +---v---+-------+---^---+---v---+-------+
                | 12345 > 12345 | 12345 | 12345 | 12345 |
                +-------+---v---+-------+-------+-------+
                | 12345 | 12345 | 12345 >  123  < 12345 |
                +-------+-------+-------+-------+-------+
                | 12345 | 12345 | 12345 | 12345 | 12345 |
                +---^---+---^---+-------+-------+-------+
                | 12345 | 12345 | 12345 | 12345 |  #2   |
                +-------+-------+-------+-------+-------+`
      );
    });

    it('should find horizontal greater-than operator pair for single cell', () => {
      const { provider, board } = createHintProviderForBoard(`
                +-------+-------+-------+-------+-------+
                |  #3   | 12345 | 12345 < 1245  > 12345 |
                +-------+---v---+-------+-------+-------+
                | 12345 | 12345 | 12345 | 12345 | 12345 |
                +-------+-------+-------+-------+-------+
                | 12345 |  #3   > 12345 | 12345 | 12345 |
                +-------+-------+-------+-------+-------+
                | 12345 | 12345 < 12345 < 12345 | 12345 |
                +-------+-------+-------+-------+-------+
                | 12345 |  #2   | 12345 | 12345 |  #3   |
                +-------+-------+-------+-------+-------+`);

      const hasChanges = provider.runAtCoordinate(Coordinate.fromText('A4', board.size));

      expect(hasChanges).toBeTruthy();
      expect(provider.explanationText).toBe(`Operators around A4 reduced candidates.`);
      expectBoard(
        board,
        `
                +-------+-------+-------+-------+-------+
                |  #3   | 12345 | 12345 <  45   > 12345 |
                +-------+---v---+-------+-------+-------+
                | 12345 | 12345 | 12345 | 12345 | 12345 |
                +-------+-------+-------+-------+-------+
                | 12345 |  #3   > 12345 | 12345 | 12345 |
                +-------+-------+-------+-------+-------+
                | 12345 | 12345 < 12345 < 12345 | 12345 |
                +-------+-------+-------+-------+-------+
                | 12345 |  #2   | 12345 | 12345 |  #3   |
                +-------+-------+-------+-------+-------+`
      );
    });

    it('should find vertical less-than operator for single cell', () => {
      const { provider, board } = createHintProviderForBoard(`
                +-------+-------+-------+-------+-------+
                | 12345 > 12345 | 12345 > 12345 < 12345 |
                +-------+---v---+-------+-------+-------+
                | 12345 | 12345 | 12345 | 12345 | 12345 |
                +-------+-------+-------+---^---+-------+
                | 12345 | 12345 | 12345 | 12345 < 12345 |
                +---v---+-------+-------+-------+-------+
                | 12345 | 12345 | 12345 | 12345 |  #2   |
                +-------+-------+-------+-------+-------+
                | 12345 | 12345 | 12345 | 12345 < 12345 |
                +-------+-------+-------+-------+-------+`);

      const hasChanges = provider.runAtCoordinate(Coordinate.fromText('B2', board.size));

      expect(hasChanges).toBeTruthy();
      expect(provider.explanationText).toBe(`Operators around B2 reduced candidates.`);
      expectBoard(
        board,
        `
                +-------+-------+-------+-------+-------+
                | 12345 > 12345 | 12345 > 12345 < 12345 |
                +-------+---v---+-------+-------+-------+
                | 12345 | 1234  | 12345 | 12345 | 12345 |
                +-------+-------+-------+---^---+-------+
                | 12345 | 12345 | 12345 | 12345 < 12345 |
                +---v---+-------+-------+-------+-------+
                | 12345 | 12345 | 12345 | 12345 |  #2   |
                +-------+-------+-------+-------+-------+
                | 12345 | 12345 | 12345 | 12345 < 12345 |
                +-------+-------+-------+-------+-------+`
      );
    });

    it('should find vertical greater-than operator for single cell', () => {
      const { provider, board } = createHintProviderForBoard(`
                +-------+-------+-------+-------+-------+
                | 12345 | 12345 | 12345 | 12345 | 12345 |
                +-------+-------+---v---+-------+-------+
                | 12345 < 12345 <  23   | 12345 | 12345 |
                +-------+-------+---^---+-------+-------+
                | 12345 | 12345 | 12345 | 12345 < 12345 |
                +-------+-------+-------+---v---+-------+
                |  #3   | 12345 | 12345 | 12345 | 12345 |
                +-------+-------+-------+-------+-------+
                | 12345 < 12345 | 12345 | 12345 | 12345 |
                +-------+-------+-------+-------+-------+`);

      const hasChanges = provider.runAtCoordinate(Coordinate.fromText('A3', board.size));

      expect(hasChanges).toBeTruthy();
      expect(provider.explanationText).toBe(`Operators around A3 reduced candidates.`);
      expectBoard(
        board,
        `
                +-------+-------+-------+-------+-------+
                | 12345 | 12345 |  345  | 12345 | 12345 |
                +-------+-------+---v---+-------+-------+
                | 12345 < 12345 <  23   | 12345 | 12345 |
                +-------+-------+---^---+-------+-------+
                | 12345 | 12345 | 12345 | 12345 < 12345 |
                +-------+-------+-------+---v---+-------+
                |  #3   | 12345 | 12345 | 12345 | 12345 |
                +-------+-------+-------+-------+-------+
                | 12345 < 12345 | 12345 | 12345 | 12345 |
                +-------+-------+-------+-------+-------+`
      );
    });

    it('should find horizontal less-than operator for single cell', () => {
      const { provider, board } = createHintProviderForBoard(`
                +-------+-------+-------+-------+-------+
                | 12345 < 12345 | 12345 | 12345 | 12345 |
                +-------+-------+---^---+-------+---^---+
                | 12345 | 12345 | 12345 <  #4   > 12345 |
                +-------+---^---+-------+-------+-------+
                | 12345 | 12345 | 12345 | 12345 | 12345 |
                +-------+-------+-------+-------+-------+
                | 12345 | 12345 | 12345 <  23   <  345  |
                +---^---+-------+-------+-------+-------+
                | 12345 | 12345 | 12345 | 12345 | 12345 |
                +-------+-------+-------+-------+-------+`);

      const hasChanges = provider.runAtCoordinate(Coordinate.fromText('D3', board.size));

      expect(hasChanges).toBeTruthy();
      expect(provider.explanationText).toBe(`Operators around D3 reduced candidates.`);
      expectBoard(
        board,
        `
                +-------+-------+-------+-------+-------+
                | 12345 < 12345 | 12345 | 12345 | 12345 |
                +-------+-------+---^---+-------+---^---+
                | 12345 | 12345 | 12345 <  #4   > 12345 |
                +-------+---^---+-------+-------+-------+
                | 12345 | 12345 | 12345 | 12345 | 12345 |
                +-------+-------+-------+-------+-------+
                | 12345 | 12345 |  12   <  23   <  345  |
                +---^---+-------+-------+-------+-------+
                | 12345 | 12345 | 12345 | 12345 | 12345 |
                +-------+-------+-------+-------+-------+`
      );
    });

    it('should find horizontal greater-than operator for single cell', () => {
      const { provider, board } = createHintProviderForBoard(`
                +------+----+--+----+--+
                |      |    |  <    |  |
                +------+-^--+--+-^--+--+
                |      | #3 |  |    |  |
                +------+----+--+----+--+
                | 1235 >    |  > #4 |  |
                +------+----+--+----+--+
                |      |    |  |    |  |
                +------+----+--+----+--+
                |      <    |  <    |  |
                +------+----+--+----+--+`);

      const hasChanges = provider.runAtCoordinate(Coordinate.fromText('C1', board.size));

      expect(hasChanges).toBeTruthy();
      expect(provider.explanationText).toBe(`Operators around C1 reduced candidates.`);
      expectBoard(
        board,
        `
                +-----+----+--+----+--+
                |     |    |  <    |  |
                +-----+-^--+--+-^--+--+
                |     | #3 |  |    |  |
                +-----+----+--+----+--+
                | 235 >    |  > #4 |  |
                +-----+----+--+----+--+
                |     |    |  |    |  |
                +-----+----+--+----+--+
                |     <    |  <    |  |
                +-----+----+--+----+--+`
      );
    });
  });

  describe('NakedPairTripleStrategy', () => {
    it('should eliminate candidate pair from row on the board', () => {
      const { provider, board } = createHintProviderForBoard(`
                +------+------+-------+-------+----+
                | 2345 | 345  |  345  >  234  | !1 |
                +--v---+--v---+-------+-------+-^--+
                | 1234 |  23  | 12345 | 12345 | 23 |
                +------+--^---+-------+-------+----+
                | 1235 |  35  | 1235  | 1235  | #4 |
                +------+------+-------+-------+-^--+
                | 234  |  !1  <  234  |  234  | !5 |
                +--v---+------+-------+---v---+----+
                | 123  | 2345 | 12345 |  12   < 23 |
                +------+------+-------+-------+----+`);

      const hasChanges = provider.runAtBoard();

      expect(hasChanges).toBeTruthy();
      expect(provider.explanationText).toBe(`Naked pair (2,3) in cells (B2,B5) eliminated 2,3 from 3 other cells in that row.`);
      expectBoard(
        board,
        `
                +------+------+-------+------+----+
                | 2345 | 345  |  345  > 234  | !1 |
                +--v---+--v---+-------+------+-^--+
                |  14  |  23  |  145  | 145  | 23 |
                +------+--^---+-------+------+----+
                | 1235 |  35  | 1235  | 1235 | #4 |
                +------+------+-------+------+-^--+
                | 234  |  !1  <  234  | 234  | !5 |
                +--v---+------+-------+--v---+----+
                | 123  | 2345 | 12345 |  12  < 23 |
                +------+------+-------+------+----+`
      );
    });

    it('should eliminate candidate pair from row in single cell', () => {
      const { provider, board } = createHintProviderForBoard(`
                +------+------+-------+-------+----+
                | 2345 | 345  |  345  >  234  | !1 |
                +--v---+--v---+-------+-------+-^--+
                | 1234 |  23  | 12345 | 12345 | 23 |
                +------+--^---+-------+-------+----+
                | 1235 |  35  | 1235  | 1235  | #4 |
                +------+------+-------+-------+-^--+
                | 234  |  !1  <  234  |  234  | !5 |
                +--v---+------+-------+---v---+----+
                | 123  | 2345 | 12345 |  12   < 23 |
                +------+------+-------+-------+----+`);

      const hasChanges = provider.runAtCoordinate(Coordinate.fromText('B4', board.size));

      expect(hasChanges).toBeTruthy();
      expect(provider.explanationText).toBe(`Naked pair (2,3) in cells (B2,B5) eliminated 2,3 from B4.`);
      expectBoard(
        board,
        `
                +------+------+-------+------+----+
                | 2345 | 345  |  345  > 234  | !1 |
                +--v---+--v---+-------+------+-^--+
                | 1234 |  23  | 12345 | 145  | 23 |
                +------+--^---+-------+------+----+
                | 1235 |  35  | 1235  | 1235 | #4 |
                +------+------+-------+------+-^--+
                | 234  |  !1  <  234  | 234  | !5 |
                +--v---+------+-------+--v---+----+
                | 123  | 2345 | 12345 |  12  < 23 |
                +------+------+-------+------+----+`
      );
    });

    it('should eliminate candidate pair from column on the board', () => {
      const { provider, board } = createHintProviderForBoard(`
                +--------+-----+------+------+--------+-------+
                |   34   | !1  <  #2  |  #5  |   34   <  !6   |
                +---^----+-----+------+------+--------+-------+
                |  456   | #3  |  46  | 124  |  2456  | 1245  |
                +--------+-----+--v---+------+---v----+-------+
                |   12   | 245 | 134  |  !6  |  123   | 12345 |
                +---^----+-----+------+--v---+---^----+-------+
                |   23   | !6  |  #5  | 1234 |  234   | 1234  |
                +---^----+-----+------+------+---^----+-------+
                |   34   < 45  | 1346 | 234  |  3456  | 12345 |
                +--------+-----+------+--v---+--------+-------+
                | 123456 | 245 | 1346 | 123  | 123456 | 12345 |
                +--------+-----+------+------+--------+-------+`);

      const hasChanges = provider.runAtBoard();

      expect(hasChanges).toBeTruthy();
      expect(provider.explanationText).toBe(`Naked pair (3,4) in cells (A1,E1) eliminated 3,4 from 3 other cells in that column.`);
      expectBoard(
        board,
        `
                +------+-----+------+------+--------+-------+
                |  34  | !1  <  #2  |  #5  |   34   <  !6   |
                +--^---+-----+------+------+--------+-------+
                |  56  | #3  |  46  | 124  |  2456  | 1245  |
                +------+-----+--v---+------+---v----+-------+
                |  12  | 245 | 134  |  !6  |  123   | 12345 |
                +--^---+-----+------+--v---+---^----+-------+
                |  2   | !6  |  #5  | 1234 |  234   | 1234  |
                +--^---+-----+------+------+---^----+-------+
                |  34  < 45  | 1346 | 234  |  3456  | 12345 |
                +------+-----+------+--v---+--------+-------+
                | 1256 | 245 | 1346 | 123  | 123456 | 12345 |
                +------+-----+------+------+--------+-------+`
      );
    });

    it('should eliminate candidate pair from column in single cell', () => {
      const { provider, board } = createHintProviderForBoard(`
                +--------+-----+------+------+--------+-------+
                |   34   | !1  <  #2  |  #5  |   34   <  !6   |
                +---^----+-----+------+------+--------+-------+
                |  456   | #3  |  46  | 124  |  2456  | 1245  |
                +--------+-----+--v---+------+---v----+-------+
                |   12   | 245 | 134  |  !6  |  123   | 12345 |
                +---^----+-----+------+--v---+---^----+-------+
                |   23   | !6  |  #5  | 1234 |  234   | 1234  |
                +---^----+-----+------+------+---^----+-------+
                |   34   < 45  | 1346 | 234  |  3456  | 12345 |
                +--------+-----+------+--v---+--------+-------+
                | 123456 | 245 | 1346 | 123  | 123456 | 12345 |
                +--------+-----+------+------+--------+-------+`);

      const hasChanges = provider.runAtCoordinate(Coordinate.fromText('F1', board.size));

      expect(hasChanges).toBeTruthy();
      expect(provider.explanationText).toBe(`Naked pair (3,4) in cells (A1,E1) eliminated 3,4 from F1.`);
      expectBoard(
        board,
        `
                +------+-----+------+------+--------+-------+
                |  34  | !1  <  #2  |  #5  |   34   <  !6   |
                +--^---+-----+------+------+--------+-------+
                | 456  | #3  |  46  | 124  |  2456  | 1245  |
                +------+-----+--v---+------+---v----+-------+
                |  12  | 245 | 134  |  !6  |  123   | 12345 |
                +--^---+-----+------+--v---+---^----+-------+
                |  23  | !6  |  #5  | 1234 |  234   | 1234  |
                +--^---+-----+------+------+---^----+-------+
                |  34  < 45  | 1346 | 234  |  3456  | 12345 |
                +------+-----+------+--v---+--------+-------+
                | 1256 | 245 | 1346 | 123  | 123456 | 12345 |
                +------+-----+------+------+--------+-------+`
      );
    });

    it('should eliminate candidate triple from row on the board', () => {
      const { provider, board } = createHintProviderForBoard(`
                +------+------+-------+------+----+
                | 2345 | 345  |  345  > 234  | !1 |
                +--v---+--v---+-------+------+-^--+
                |  14  |  23  |  145  | 145  | 23 |
                +------+--^---+-------+------+----+
                | 1235 |  35  | 1235  | 1235 | #4 |
                +------+------+-------+------+-^--+
                | 234  |  !1  <  234  | 234  | !5 |
                +--v---+------+-------+--v---+----+
                | 123  | 2345 | 12345 |  12  < 23 |
                +------+------+-------+------+----+`);

      const hasChanges = provider.runAtBoard();

      expect(hasChanges).toBeTruthy();
      expect(provider.explanationText).toBe(`Naked triple (1,2,3) in cells (E1,E4,E5) eliminated 1,2,3 from 2 other cells in that row.`);
      expectBoard(
        board,
        `
                +------+-----+------+------+----+
                | 2345 | 345 | 345  > 234  | !1 |
                +--v---+--v--+------+------+-^--+
                |  14  | 23  | 145  | 145  | 23 |
                +------+--^--+------+------+----+
                | 1235 | 35  | 1235 | 1235 | #4 |
                +------+-----+------+------+-^--+
                | 234  | !1  < 234  | 234  | !5 |
                +--v---+-----+------+--v---+----+
                | 123  | 45  |  45  |  12  < 23 |
                +------+-----+------+------+----+`
      );
    });

    it('should eliminate candidate triple from row in single cell', () => {
      const { provider, board } = createHintProviderForBoard(`
                +------+------+-------+------+----+
                | 2345 | 345  |  345  > 234  | !1 |
                +--v---+--v---+-------+------+-^--+
                |  14  |  23  |  145  | 145  | 23 |
                +------+--^---+-------+------+----+
                | 1235 |  35  | 1235  | 1235 | #4 |
                +------+------+-------+------+-^--+
                | 234  |  !1  <  234  | 234  | !5 |
                +--v---+------+-------+--v---+----+
                | 123  | 2345 | 12345 |  12  < 23 |
                +------+------+-------+------+----+`);

      const hasChanges = provider.runAtCoordinate(Coordinate.fromText('E3', board.size));

      expect(hasChanges).toBeTruthy();
      expect(provider.explanationText).toBe(`Naked triple (1,2,3) in cells (E1,E4,E5) eliminated 1,2,3 from E3.`);
      expectBoard(
        board,
        `
                +------+------+------+------+----+
                | 2345 | 345  | 345  > 234  | !1 |
                +--v---+--v---+------+------+-^--+
                |  14  |  23  | 145  | 145  | 23 |
                +------+--^---+------+------+----+
                | 1235 |  35  | 1235 | 1235 | #4 |
                +------+------+------+------+-^--+
                | 234  |  !1  < 234  | 234  | !5 |
                +--v---+------+------+--v---+----+
                | 123  | 2345 |  45  |  12  < 23 |
                +------+------+------+------+----+`
      );
    });

    it('should eliminate candidate triple from column on the board', () => {
      const { provider, board } = createHintProviderForBoard(`
                +------+-------+----+-------+----+------+--------+
                |  #3  >  !2   | 46 |  456  | !7 |  !1  |  456   |
                +--v---+-------+-v--+-------+----+------+--------+
                |  !2  | 13567 | 13 | 1356  | #4 | 3567 >  1356  |
                +------+-------+----+-------+-^--+------+--------+
                | 467  |  34   > 13 | 12346 | !5 <  67  | 123467 |
                +------+---^---+----+-------+-^--+------+--------+
                |  #1  |  45   | #2 |  !7   > !6 | 345  |  345   |
                +------+-------+----+-------+----+--^---+--------+
                | 4567 | 14567 | 46 | 12456 | !3 | 4567 | 124567 |
                +------+-------+-^--+-------+----+------+--------+
                | 456  >  345  | !7 | 3456  | !1 |  !2  |  3456  |
                +------+-------+----+-------+-^--+------+--------+
                | 467  |  134  < #5 | 1346  | #2 | 3467 >  1346  |
                +------+-------+----+-------+----+------+--------+`);

      const hasChanges = provider.runAtBoard();

      expect(hasChanges).toBeTruthy();
      expect(provider.explanationText).toBe(`Naked triple (3,4,5) in cells (C2,D2,F2) eliminated 3,4,5 from 3 other cells in that column.`);
      expectBoard(
        board,
        `
                +------+-----+----+-------+----+------+--------+
                |  #3  > !2  | 46 |  456  | !7 |  !1  |  456   |
                +--v---+-----+-v--+-------+----+------+--------+
                |  !2  | 167 | 13 | 1356  | #4 | 3567 >  1356  |
                +------+-----+----+-------+-^--+------+--------+
                | 467  | 34  > 13 | 12346 | !5 <  67  | 123467 |
                +------+--^--+----+-------+-^--+------+--------+
                |  #1  | 45  | #2 |  !7   > !6 | 345  |  345   |
                +------+-----+----+-------+----+--^---+--------+
                | 4567 | 167 | 46 | 12456 | !3 | 4567 | 124567 |
                +------+-----+-^--+-------+----+------+--------+
                | 456  > 345 | !7 | 3456  | !1 |  !2  |  3456  |
                +------+-----+----+-------+-^--+------+--------+
                | 467  |  1  < #5 | 1346  | #2 | 3467 >  1346  |
                +------+-----+----+-------+----+------+--------+`
      );
    });

    it('should eliminate candidate triple from column in single cell', () => {
      const { provider, board } = createHintProviderForBoard(`
                +------+-------+----+-------+----+------+--------+
                |  #3  >  !2   | 46 |  456  | !7 |  !1  |  456   |
                +--v---+-------+-v--+-------+----+------+--------+
                |  !2  | 13567 | 13 | 1356  | #4 | 3567 >  1356  |
                +------+-------+----+-------+-^--+------+--------+
                | 467  |  34   > 13 | 12346 | !5 <  67  | 123467 |
                +------+---^---+----+-------+-^--+------+--------+
                |  #1  |  45   | #2 |  !7   > !6 | 345  |  345   |
                +------+-------+----+-------+----+--^---+--------+
                | 4567 | 14567 | 46 | 12456 | !3 | 4567 | 124567 |
                +------+-------+-^--+-------+----+------+--------+
                | 456  >  345  | !7 | 3456  | !1 |  !2  |  3456  |
                +------+-------+----+-------+-^--+------+--------+
                | 467  |  134  < #5 | 1346  | #2 | 3467 >  1346  |
                +------+-------+----+-------+----+------+--------+`);

      const hasChanges = provider.runAtCoordinate(Coordinate.fromText('G2', board.size));

      expect(hasChanges).toBeTruthy();
      expect(provider.explanationText).toBe(`Naked triple (3,4,5) in cells (C2,D2,F2) eliminated 3,4,5 from G2.`);
      expectBoard(
        board,
        `
                +------+-------+----+-------+----+------+--------+
                |  #3  >  !2   | 46 |  456  | !7 |  !1  |  456   |
                +--v---+-------+-v--+-------+----+------+--------+
                |  !2  | 13567 | 13 | 1356  | #4 | 3567 >  1356  |
                +------+-------+----+-------+-^--+------+--------+
                | 467  |  34   > 13 | 12346 | !5 <  67  | 123467 |
                +------+---^---+----+-------+-^--+------+--------+
                |  #1  |  45   | #2 |  !7   > !6 | 345  |  345   |
                +------+-------+----+-------+----+--^---+--------+
                | 4567 | 14567 | 46 | 12456 | !3 | 4567 | 124567 |
                +------+-------+-^--+-------+----+------+--------+
                | 456  >  345  | !7 | 3456  | !1 |  !2  |  3456  |
                +------+-------+----+-------+-^--+------+--------+
                | 467  |   1   < #5 | 1346  | #2 | 3467 >  1346  |
                +------+-------+----+-------+----+------+--------+`
      );
    });
  });

  describe('HiddenPairTripleStrategy', () => {
    it('should find hidden pair in row on the board', () => {
      const { provider, board } = createHintProviderForBoard(`
                +------+-----+----+-------+----+------+--------+
                |  #3  > !2  | 46 |  456  | !7 |  !1  |  456   |
                +--v---+-----+-v--+-------+----+------+--------+
                |  !2  | 67  | 13 | 1356  | #4 | 3567 >  1356  |
                +------+-----+----+-------+-^--+------+--------+
                | 467  | 34  > 13 | 12346 | !5 <  67  | 123467 |
                +------+--^--+----+-------+-^--+------+--------+
                |  #1  | 45  | #2 |  !7   > !6 | 345  |  345   |
                +------+-----+----+-------+----+--^---+--------+
                | 4567 | 67  | 46 | 12456 | !3 | 4567 | 124567 |
                +------+-----+-^--+-------+----+------+--------+
                | 456  > 345 | !7 | 3456  | !1 |  !2  |  3456  |
                +------+-----+----+-------+-^--+------+--------+
                | 467  | !1  < #5 |  346  | #2 | 467  >  346   |
                +------+-----+----+-------+----+------+--------+`);

      const hasChanges = provider.runAtBoard();

      expect(hasChanges).toBeTruthy();
      expect(provider.explanationText).toBe(`Hidden pair (1,2) in row of cells (E4,E7) eliminated others in these cells.`);
      expectBoard(
        board,
        `
                +------+-----+----+-------+----+------+--------+
                |  #3  > !2  | 46 |  456  | !7 |  !1  |  456   |
                +--v---+-----+-v--+-------+----+------+--------+
                |  !2  | 67  | 13 | 1356  | #4 | 3567 >  1356  |
                +------+-----+----+-------+-^--+------+--------+
                | 467  | 34  > 13 | 12346 | !5 <  67  | 123467 |
                +------+--^--+----+-------+-^--+------+--------+
                |  #1  | 45  | #2 |  !7   > !6 | 345  |  345   |
                +------+-----+----+-------+----+--^---+--------+
                | 4567 | 67  | 46 |  12   | !3 | 4567 |   12   |
                +------+-----+-^--+-------+----+------+--------+
                | 456  > 345 | !7 | 3456  | !1 |  !2  |  3456  |
                +------+-----+----+-------+-^--+------+--------+
                | 467  | !1  < #5 |  346  | #2 | 467  >  346   |
                +------+-----+----+-------+----+------+--------+`
      );
    });

    it('should find hidden pair in row for single cell', () => {
      const { provider, board } = createHintProviderForBoard(`
                +------+-----+----+-------+----+------+--------+
                |  #3  > !2  | 46 |  456  | !7 |  !1  |  456   |
                +--v---+-----+-v--+-------+----+------+--------+
                |  !2  | 67  | 13 | 1356  | #4 | 3567 >  1356  |
                +------+-----+----+-------+-^--+------+--------+
                | 467  | 34  > 13 | 12346 | !5 <  67  | 123467 |
                +------+--^--+----+-------+-^--+------+--------+
                |  #1  | 45  | #2 |  !7   > !6 | 345  |  345   |
                +------+-----+----+-------+----+--^---+--------+
                | 4567 | 67  | 46 | 12456 | !3 | 4567 | 124567 |
                +------+-----+-^--+-------+----+------+--------+
                | 456  > 345 | !7 | 3456  | !1 |  !2  |  3456  |
                +------+-----+----+-------+-^--+------+--------+
                | 467  | !1  < #5 |  346  | #2 | 467  >  346   |
                +------+-----+----+-------+----+------+--------+`);

      const hasChanges = provider.runAtCoordinate(Coordinate.fromText('E7', board.size));

      expect(hasChanges).toBeTruthy();
      expect(provider.explanationText).toBe(`Hidden pair (1,2) in row of cells (E4,E7) eliminated others in E7.`);
      expectBoard(
        board,
        `
                +------+-----+----+-------+----+------+--------+
                |  #3  > !2  | 46 |  456  | !7 |  !1  |  456   |
                +--v---+-----+-v--+-------+----+------+--------+
                |  !2  | 67  | 13 | 1356  | #4 | 3567 >  1356  |
                +------+-----+----+-------+-^--+------+--------+
                | 467  | 34  > 13 | 12346 | !5 <  67  | 123467 |
                +------+--^--+----+-------+-^--+------+--------+
                |  #1  | 45  | #2 |  !7   > !6 | 345  |  345   |
                +------+-----+----+-------+----+--^---+--------+
                | 4567 | 67  | 46 | 12456 | !3 | 4567 |   12   |
                +------+-----+-^--+-------+----+------+--------+
                | 456  > 345 | !7 | 3456  | !1 |  !2  |  3456  |
                +------+-----+----+-------+-^--+------+--------+
                | 467  | !1  < #5 |  346  | #2 | 467  >  346   |
                +------+-----+----+-------+----+------+--------+`
      );
    });

    it('should find hidden pair in column on the board', () => {
      const { provider, board } = createHintProviderForBoard(`
                +---------+--------+---------+-----+--------+---------+------+
                | 123456  < 23467  | 1234567 | 56  >  345   >   234   > 123  |
                +---------+--------+---------+--^--+--------+---------+------+
                | 1234567 | 12346  < 234567  | 67  | 234567 | 1234567 | 4567 |
                +---------+--------+---------+-----+--------+---------+--v---+
                | 234567  |  3467  >  23456  | !1  | 234567 |   234   < 345  |
                +---------+--------+---------+-----+--------+---------+--^---+
                | 1234567 | 123467 | 1234567 | 567 | 234567 |  12345  | 456  |
                +---------+--------+---------+--v--+--------+----^----+--^---+
                |  34567  |  3467  |  34567  | !2  >   !1   |  3456   < 567  |
                +---------+--------+---------+--^--+--------+---------+------+
                |   12    |   #5   |   12    < !3  |  467   |   467   | 467  |
                +----^----+--------+---------+--^--+--------+---------+------+
                |   23    |   67   >   56    > !4  <  567   |   123   | 123  |
                +---------+--------+---------+-----+--------+---------+------+`);

      const hasChanges = provider.runAtBoard();

      expect(hasChanges).toBeTruthy();
      expect(provider.explanationText).toBe(`Hidden pair (1,2) in column of cells (A7,G7) eliminated others in these cells.`);
      expectBoard(
        board,
        `
                +---------+--------+---------+-----+--------+---------+------+
                | 123456  < 23467  | 1234567 | 56  >  345   >   234   >  12  |
                +---------+--------+---------+--^--+--------+---------+------+
                | 1234567 | 12346  < 234567  | 67  | 234567 | 1234567 | 4567 |
                +---------+--------+---------+-----+--------+---------+--v---+
                | 234567  |  3467  >  23456  | !1  | 234567 |   234   < 345  |
                +---------+--------+---------+-----+--------+---------+--^---+
                | 1234567 | 123467 | 1234567 | 567 | 234567 |  12345  | 456  |
                +---------+--------+---------+--v--+--------+----^----+--^---+
                |  34567  |  3467  |  34567  | !2  >   !1   |  3456   < 567  |
                +---------+--------+---------+--^--+--------+---------+------+
                |   12    |   #5   |   12    < !3  |  467   |   467   | 467  |
                +----^----+--------+---------+--^--+--------+---------+------+
                |   23    |   67   >   56    > !4  <  567   |   123   |  12  |
                +---------+--------+---------+-----+--------+---------+------+`
      );
    });

    it('should find hidden pair in column for single cell', () => {
      const { provider, board } = createHintProviderForBoard(`
                +---------+--------+---------+-----+--------+---------+------+
                | 123456  < 23467  | 1234567 | 56  >  345   >   234   > 123  |
                +---------+--------+---------+--^--+--------+---------+------+
                | 1234567 | 12346  < 234567  | 67  | 234567 | 1234567 | 4567 |
                +---------+--------+---------+-----+--------+---------+--v---+
                | 234567  |  3467  >  23456  | !1  | 234567 |   234   < 345  |
                +---------+--------+---------+-----+--------+---------+--^---+
                | 1234567 | 123467 | 1234567 | 567 | 234567 |  12345  | 456  |
                +---------+--------+---------+--v--+--------+----^----+--^---+
                |  34567  |  3467  |  34567  | !2  >   !1   |  3456   < 567  |
                +---------+--------+---------+--^--+--------+---------+------+
                |   12    |   #5   |   12    < !3  |  467   |   467   | 467  |
                +----^----+--------+---------+--^--+--------+---------+------+
                |   23    |   67   >   56    > !4  <  567   |   123   | 123  |
                +---------+--------+---------+-----+--------+---------+------+`);

      const hasChanges = provider.runAtCoordinate(Coordinate.fromText('A7', board.size));

      expect(hasChanges).toBeTruthy();
      expect(provider.explanationText).toBe(`Hidden pair (1,2) in column of cells (A7,G7) eliminated others in A7.`);
      expectBoard(
        board,
        `
                +---------+--------+---------+-----+--------+---------+------+
                | 123456  < 23467  | 1234567 | 56  >  345   >   234   >  12  |
                +---------+--------+---------+--^--+--------+---------+------+
                | 1234567 | 12346  < 234567  | 67  | 234567 | 1234567 | 4567 |
                +---------+--------+---------+-----+--------+---------+--v---+
                | 234567  |  3467  >  23456  | !1  | 234567 |   234   < 345  |
                +---------+--------+---------+-----+--------+---------+--^---+
                | 1234567 | 123467 | 1234567 | 567 | 234567 |  12345  | 456  |
                +---------+--------+---------+--v--+--------+----^----+--^---+
                |  34567  |  3467  |  34567  | !2  >   !1   |  3456   < 567  |
                +---------+--------+---------+--^--+--------+---------+------+
                |   12    |   #5   |   12    < !3  |  467   |   467   | 467  |
                +----^----+--------+---------+--^--+--------+---------+------+
                |   23    |   67   >   56    > !4  <  567   |   123   | 123  |
                +---------+--------+---------+-----+--------+---------+------+`
      );
    });

    it('should find hidden triple in row on the board', () => {
      const { provider, board } = createHintProviderForBoard(`
                +--------+-------+---------+----+-----+----+------+-----+-----+
                |   #3   |  !7   |   145   | #9 | 14  | #8 |  45  > !2  | !6  |
                +--------+---v---+---------+----+-----+----+------+--v--+--v--+
                |   79   |  !6   |   79    | !3 > !2  | #4 |  #8  | !1  | !5  |
                +--------+-------+---------+-^--+-----+----+------+-----+-----+
                |   !1   |  !5   |   23    < #4 | !6  < !7 |  !9  | #8  | 23  |
                +---^----+---v---+---------+----+-----+----+--v---+-----+-----+
                |  249   |  124  |  1249   | !7 | 149 | !5 <  !6  > !3  | #8  |
                +--------+-------+---------+-v--+-----+----+------+-----+-----+
                |   24   | 23489 | 234789  | !5 | 349 | !6 |  !1  | 79  | 234 |
                +---^----+-------+---------+-v--+-----+-^--+--^---+-----+-----+
                |  4567  | 1234  | 1234567 | 12 | !8  | !9 | 234  | 567 | 234 |
                +---^----+-------+---------+----+--v--+----+--^---+--^--+-----+
                |  5689  |  489  >  34568  | 68 | !7  | !2 | 345  | 69  | #1  |
                +--------+-------+---------+----+--v--+-^--+------+-----+-----+
                |   68   >  12   |   68    | 12 < #5  > !3 |  !7  > #4  | !9  |
                +--------+-------+---------+----+-----+-v--+------+-----+--v--+
                | 245689 | 23489 | 2345689 | 68 | 349 | !1 | 2345 | 56  < !7  |
                +--------+-------+---------+----+-----+----+------+-----+-----+`);

      const hasChanges = provider.runAtBoard();

      expect(hasChanges).toBeTruthy();
      expect(provider.explanationText).toBe(`Hidden triple (5,6,7) in row of cells (F1,F3,F8) eliminated others in these cells.`);
      expectBoard(
        board,
        `
                +--------+-------+---------+----+-----+----+------+-----+-----+
                |   #3   |  !7   |   145   | #9 | 14  | #8 |  45  > !2  | !6  |
                +--------+---v---+---------+----+-----+----+------+--v--+--v--+
                |   79   |  !6   |   79    | !3 > !2  | #4 |  #8  | !1  | !5  |
                +--------+-------+---------+-^--+-----+----+------+-----+-----+
                |   !1   |  !5   |   23    < #4 | !6  < !7 |  !9  | #8  | 23  |
                +---^----+---v---+---------+----+-----+----+--v---+-----+-----+
                |  249   |  124  |  1249   | !7 | 149 | !5 <  !6  > !3  | #8  |
                +--------+-------+---------+-v--+-----+----+------+-----+-----+
                |   24   | 23489 | 234789  | !5 | 349 | !6 |  !1  | 79  | 234 |
                +---^----+-------+---------+-v--+-----+-^--+--^---+-----+-----+
                |  567   | 1234  |   567   | 12 | !8  | !9 | 234  | 567 | 234 |
                +---^----+-------+---------+----+--v--+----+--^---+--^--+-----+
                |  5689  |  489  >  34568  | 68 | !7  | !2 | 345  | 69  | #1  |
                +--------+-------+---------+----+--v--+-^--+------+-----+-----+
                |   68   >  12   |   68    | 12 < #5  > !3 |  !7  > #4  | !9  |
                +--------+-------+---------+----+-----+-v--+------+-----+--v--+
                | 245689 | 23489 | 2345689 | 68 | 349 | !1 | 2345 | 56  < !7  |
                +--------+-------+---------+----+-----+----+------+-----+-----+`
      );
    });

    it('should find hidden triple in row for single cell', () => {
      const { provider, board } = createHintProviderForBoard(`
                +--------+-------+---------+----+-----+----+------+-----+-----+
                |   #3   |  !7   |   145   | #9 | 14  | #8 |  45  > !2  | !6  |
                +--------+---v---+---------+----+-----+----+------+--v--+--v--+
                |   79   |  !6   |   79    | !3 > !2  | #4 |  #8  | !1  | !5  |
                +--------+-------+---------+-^--+-----+----+------+-----+-----+
                |   !1   |  !5   |   23    < #4 | !6  < !7 |  !9  | #8  | 23  |
                +---^----+---v---+---------+----+-----+----+--v---+-----+-----+
                |  249   |  124  |  1249   | !7 | 149 | !5 <  !6  > !3  | #8  |
                +--------+-------+---------+-v--+-----+----+------+-----+-----+
                |   24   | 23489 | 234789  | !5 | 349 | !6 |  !1  | 79  | 234 |
                +---^----+-------+---------+-v--+-----+-^--+--^---+-----+-----+
                |  4567  | 1234  | 1234567 | 12 | !8  | !9 | 234  | 567 | 234 |
                +---^----+-------+---------+----+--v--+----+--^---+--^--+-----+
                |  5689  |  489  >  34568  | 68 | !7  | !2 | 345  | 69  | #1  |
                +--------+-------+---------+----+--v--+-^--+------+-----+-----+
                |   68   >  12   |   68    | 12 < #5  > !3 |  !7  > #4  | !9  |
                +--------+-------+---------+----+-----+-v--+------+-----+--v--+
                | 245689 | 23489 | 2345689 | 68 | 349 | !1 | 2345 | 56  < !7  |
                +--------+-------+---------+----+-----+----+------+-----+-----+`);

      const hasChanges = provider.runAtCoordinate(Coordinate.fromText('F1', board.size));

      expect(hasChanges).toBeTruthy();
      expect(provider.explanationText).toBe(`Hidden triple (5,6,7) in row of cells (F1,F3,F8) eliminated others in F1.`);
      expectBoard(
        board,
        `
                +--------+-------+---------+----+-----+----+------+-----+-----+
                |   #3   |  !7   |   145   | #9 | 14  | #8 |  45  > !2  | !6  |
                +--------+---v---+---------+----+-----+----+------+--v--+--v--+
                |   79   |  !6   |   79    | !3 > !2  | #4 |  #8  | !1  | !5  |
                +--------+-------+---------+-^--+-----+----+------+-----+-----+
                |   !1   |  !5   |   23    < #4 | !6  < !7 |  !9  | #8  | 23  |
                +---^----+---v---+---------+----+-----+----+--v---+-----+-----+
                |  249   |  124  |  1249   | !7 | 149 | !5 <  !6  > !3  | #8  |
                +--------+-------+---------+-v--+-----+----+------+-----+-----+
                |   24   | 23489 | 234789  | !5 | 349 | !6 |  !1  | 79  | 234 |
                +---^----+-------+---------+-v--+-----+-^--+--^---+-----+-----+
                |  567   | 1234  | 1234567 | 12 | !8  | !9 | 234  | 567 | 234 |
                +---^----+-------+---------+----+--v--+----+--^---+--^--+-----+
                |  5689  |  489  >  34568  | 68 | !7  | !2 | 345  | 69  | #1  |
                +--------+-------+---------+----+--v--+-^--+------+-----+-----+
                |   68   >  12   |   68    | 12 < #5  > !3 |  !7  > #4  | !9  |
                +--------+-------+---------+----+-----+-v--+------+-----+--v--+
                | 245689 | 23489 | 2345689 | 68 | 349 | !1 | 2345 | 56  < !7  |
                +--------+-------+---------+----+-----+----+------+-----+-----+`
      );
    });

    it('should find hidden triple in column on the board', () => {
      const { provider, board } = createHintProviderForBoard(`
                +--------+--------+----------+-------+---------+----------+--------+------+
                | 123567 | 234567 >  123456  | 4567  |   567   | 1234567  | 34567  <  !8  |
                +--------+--------+----------+-------+----v----+----------+---v----+------+
                |  5678  >  3567  >   2356   |  #1   |   #4    |  235678  |  2356  |  23  |
                +--------+--------+----------+-------+---------+----------+--------+--^---+
                |   #4   <  5678  | 1235678  |  567  <   678   |  235678  > 123567 |  35  |
                +---v----+--------+----------+-------+---------+----------+--------+--^---+
                |   23   >   12   | 12345678 | 45678 | 1235678 | 12345678 | 12345  < 456  |
                +--------+--------+----------+-------+---------+----------+--------+--^---+
                |  1256  | 12456  |  12456   |  #3   <   56    |  12456   |   !8   |  !7  |
                +--------+---^----+----------+---v---+---------+----------+---v----+------+
                | 35678  | 345678 |  345678  |  !2   |  5678   >   3456   <  4567  |  !1  |
                +--------+--------+----------+-------+---------+----------+--------+------+
                |  567   >  456   >   345    | 45678 | 123567  < 2345678  |  1234  < 2345 |
                +---^----+--------+----v-----+-------+---------+----------+--------+--^---+
                |  678   |  123   <   234    | 45678 | 1235678 |   5678   >  4567  > 3456 |
                +--------+--------+----------+-------+---------+----------+--------+------+`);

      const hasChanges = provider.runAtBoard();

      expect(hasChanges).toBeTruthy();
      expect(provider.explanationText).toBe(`Hidden triple (1,2,3) in column of cells (D5,G5,H5) eliminated others in these cells.`);
      expectBoard(
        board,
        `
                +--------+--------+----------+-------+------+----------+--------+------+
                | 123567 | 234567 >  123456  | 4567  | 567  | 1234567  | 34567  <  !8  |
                +--------+--------+----------+-------+--v---+----------+---v----+------+
                |  5678  >  3567  >   2356   |  #1   |  #4  |  235678  |  2356  |  23  |
                +--------+--------+----------+-------+------+----------+--------+--^---+
                |   #4   <  5678  | 1235678  |  567  < 678  |  235678  > 123567 |  35  |
                +---v----+--------+----------+-------+------+----------+--------+--^---+
                |   23   >   12   | 12345678 | 45678 | 123  | 12345678 | 12345  < 456  |
                +--------+--------+----------+-------+------+----------+--------+--^---+
                |  1256  | 12456  |  12456   |  #3   <  56  |  12456   |   !8   |  !7  |
                +--------+---^----+----------+---v---+------+----------+---v----+------+
                | 35678  | 345678 |  345678  |  !2   | 5678 >   3456   <  4567  |  !1  |
                +--------+--------+----------+-------+------+----------+--------+------+
                |  567   >  456   >   345    | 45678 | 123  < 2345678  |  1234  < 2345 |
                +---^----+--------+----v-----+-------+------+----------+--------+--^---+
                |  678   |  123   <   234    | 45678 | 123  |   5678   >  4567  > 3456 |
                +--------+--------+----------+-------+------+----------+--------+------+`
      );
    });

    it('should find hidden triple in column for single cell', () => {
      const { provider, board } = createHintProviderForBoard(`
                +--------+--------+----------+-------+---------+----------+--------+------+
                | 123567 | 234567 >  123456  | 4567  |   567   | 1234567  | 34567  <  !8  |
                +--------+--------+----------+-------+----v----+----------+---v----+------+
                |  5678  >  3567  >   2356   |  #1   |   #4    |  235678  |  2356  |  23  |
                +--------+--------+----------+-------+---------+----------+--------+--^---+
                |   #4   <  5678  | 1235678  |  567  <   678   |  235678  > 123567 |  35  |
                +---v----+--------+----------+-------+---------+----------+--------+--^---+
                |   23   >   12   | 12345678 | 45678 | 1235678 | 12345678 | 12345  < 456  |
                +--------+--------+----------+-------+---------+----------+--------+--^---+
                |  1256  | 12456  |  12456   |  #3   <   56    |  12456   |   !8   |  !7  |
                +--------+---^----+----------+---v---+---------+----------+---v----+------+
                | 35678  | 345678 |  345678  |  !2   |  5678   >   3456   <  4567  |  !1  |
                +--------+--------+----------+-------+---------+----------+--------+------+
                |  567   >  456   >   345    | 45678 | 123567  < 2345678  |  1234  < 2345 |
                +---^----+--------+----v-----+-------+---------+----------+--------+--^---+
                |  678   |  123   <   234    | 45678 | 1235678 |   5678   >  4567  > 3456 |
                +--------+--------+----------+-------+---------+----------+--------+------+`);

      const hasChanges = provider.runAtCoordinate(Coordinate.fromText('H5', board.size));

      expect(hasChanges).toBeTruthy();
      expect(provider.explanationText).toBe(`Hidden triple (1,2,3) in column of cells (D5,G5,H5) eliminated others in H5.`);
      expectBoard(
        board,
        `
                +--------+--------+----------+-------+---------+----------+--------+------+
                | 123567 | 234567 >  123456  | 4567  |   567   | 1234567  | 34567  <  !8  |
                +--------+--------+----------+-------+----v----+----------+---v----+------+
                |  5678  >  3567  >   2356   |  #1   |   #4    |  235678  |  2356  |  23  |
                +--------+--------+----------+-------+---------+----------+--------+--^---+
                |   #4   <  5678  | 1235678  |  567  <   678   |  235678  > 123567 |  35  |
                +---v----+--------+----------+-------+---------+----------+--------+--^---+
                |   23   >   12   | 12345678 | 45678 | 1235678 | 12345678 | 12345  < 456  |
                +--------+--------+----------+-------+---------+----------+--------+--^---+
                |  1256  | 12456  |  12456   |  #3   <   56    |  12456   |   !8   |  !7  |
                +--------+---^----+----------+---v---+---------+----------+---v----+------+
                | 35678  | 345678 |  345678  |  !2   |  5678   >   3456   <  4567  |  !1  |
                +--------+--------+----------+-------+---------+----------+--------+------+
                |  567   >  456   >   345    | 45678 | 123567  < 2345678  |  1234  < 2345 |
                +---^----+--------+----v-----+-------+---------+----------+--------+--^---+
                |  678   |  123   <   234    | 45678 |   123   |   5678   >  4567  > 3456 |
                +--------+--------+----------+-------+---------+----------+--------+------+`
      );
    });
  });

  describe('NakedQuadStrategy', () => {
    it('should eliminate candidate quad from row on the board', () => {
      const { provider, board } = createHintProviderForBoard(`
                +-------+--------+---------+--------+-----+--------+-----------+----------+----------+
                | 34567 | 356789 > 2345678 > 123456 | 78  | 345678 <  456789   | 12356789 | 23456789 |
                +-------+--------+---------+--------+--v--+--------+-----v-----+----------+----------+
                | 4567  |  5678  >  34567  |  1345  | !2  | 345678 |  1345678  | 1356789  | 3456789  |
                +---v---+---^----+----v----+---^----+-----+--------+-----------+----------+----------+
                | 3456  |  6789  | 123456  |   56   > 45  >   34   | 123456789 | 12356789 | 23456789 |
                +-------+--------+---------+---^----+--^--+--------+-----------+----------+----------+
                |  !9   |  2356  <  34568  |   #7   > 56  |   !1   <   23456   <   568    >   3456   |
                +-------+---v----+----^----+--------+-----+--------+-----------+----^-----+----v-----+
                | 34567 |  123   | 456789  | 12345  < 456 <  567   <   6789    |   6789   |   2345   |
                +-------+---^----+---------+--------+--v--+---^----+-----------+----------+----------+
                |  #2   |   !4   <  5678   |   !9   | !3  |   78   >    67     >    56    >    !1    |
                +-------+--------+----^----+--------+--v--+--------+-----------+----^-----+----------+
                | 34567 <  5679  |   679   |   !8   | !1  |   !2   <  345679   |   679    |  345679  |
                +-------+---v----+---------+--------+-----+--------+-----------+----------+----v-----+
                |  !1   < 235678 |  2345   <  3456  < 78  |   !9   >    678    >   567    | 2345678  |
                +-------+--------+----v----+--------+--^--+--------+-----------+----v-----+----------+
                |  #8   | 123567 |   123   <  2356  | !9  |  3567  |    123    <    #4    |  23567   |
                +-------+--------+---------+--------+-----+--------+-----------+----------+----------+`);

      const hasChanges = provider.runAtBoard();

      expect(hasChanges).toBeTruthy();
      expect(provider.explanationText).toBe(`Naked quad (3,4,5,6) in cells (C1,C4,C5,C6) eliminated 3,4,5,6 from 5 other cells in that row.`);
      expectBoard(
        board,
        `
                +-------+--------+---------+--------+-----+--------+---------+----------+----------+
                | 34567 | 356789 > 2345678 > 123456 | 78  | 345678 < 456789  | 12356789 | 23456789 |
                +-------+--------+---------+--------+--v--+--------+----v----+----------+----------+
                | 4567  |  5678  >  34567  |  1345  | !2  | 345678 | 1345678 | 1356789  | 3456789  |
                +---v---+---^----+----v----+---^----+-----+--------+---------+----------+----------+
                | 3456  |  789   |   12    |   56   > 45  >   34   |  12789  |  12789   |   2789   |
                +-------+--------+---------+---^----+--^--+--------+---------+----------+----------+
                |  !9   |  2356  <  34568  |   #7   > 56  |   !1   <  23456  <   568    >   3456   |
                +-------+---v----+----^----+--------+-----+--------+---------+----^-----+----v-----+
                | 34567 |  123   | 456789  | 12345  < 456 <  567   <  6789   |   6789   |   2345   |
                +-------+---^----+---------+--------+--v--+---^----+---------+----------+----------+
                |  #2   |   !4   <  5678   |   !9   | !3  |   78   >   67    >    56    >    !1    |
                +-------+--------+----^----+--------+--v--+--------+---------+----^-----+----------+
                | 34567 <  5679  |   679   |   !8   | !1  |   !2   < 345679  |   679    |  345679  |
                +-------+---v----+---------+--------+-----+--------+---------+----------+----v-----+
                |  !1   < 235678 |  2345   <  3456  < 78  |   !9   >   678   >   567    | 2345678  |
                +-------+--------+----v----+--------+--^--+--------+---------+----v-----+----------+
                |  #8   | 123567 |   123   <  2356  | !9  |  3567  |   123   <    #4    |  23567   |
                +-------+--------+---------+--------+-----+--------+---------+----------+----------+`
      );
    });

    it('should eliminate candidate quad from row in single cell', () => {
      const { provider, board } = createHintProviderForBoard(`
                +-------+--------+---------+--------+-----+--------+-----------+----------+----------+
                | 34567 | 356789 > 2345678 > 123456 | 78  | 345678 <  456789   | 12356789 | 23456789 |
                +-------+--------+---------+--------+--v--+--------+-----v-----+----------+----------+
                | 4567  |  5678  >  34567  |  1345  | !2  | 345678 |  1345678  | 1356789  | 3456789  |
                +---v---+---^----+----v----+---^----+-----+--------+-----------+----------+----------+
                | 3456  |  6789  | 123456  |   56   > 45  >   34   | 123456789 | 12356789 | 23456789 |
                +-------+--------+---------+---^----+--^--+--------+-----------+----------+----------+
                |  !9   |  2356  <  34568  |   #7   > 56  |   !1   <   23456   <   568    >   3456   |
                +-------+---v----+----^----+--------+-----+--------+-----------+----^-----+----v-----+
                | 34567 |  123   | 456789  | 12345  < 456 <  567   <   6789    |   6789   |   2345   |
                +-------+---^----+---------+--------+--v--+---^----+-----------+----------+----------+
                |  #2   |   !4   <  5678   |   !9   | !3  |   78   >    67     >    56    >    !1    |
                +-------+--------+----^----+--------+--v--+--------+-----------+----^-----+----------+
                | 34567 <  5679  |   679   |   !8   | !1  |   !2   <  345679   |   679    |  345679  |
                +-------+---v----+---------+--------+-----+--------+-----------+----------+----v-----+
                |  !1   < 235678 |  2345   <  3456  < 78  |   !9   >    678    >   567    | 2345678  |
                +-------+--------+----v----+--------+--^--+--------+-----------+----v-----+----------+
                |  #8   | 123567 |   123   <  2356  | !9  |  3567  |    123    <    #4    |  23567   |
                +-------+--------+---------+--------+-----+--------+-----------+----------+----------+`);

      const hasChanges = provider.runAtCoordinate(Coordinate.fromText('C7', board.size));

      expect(hasChanges).toBeTruthy();
      expect(provider.explanationText).toBe(`Naked quad (3,4,5,6) in cells (C1,C4,C5,C6) eliminated 3,4,5,6 from C7.`);
      expectBoard(
        board,
        `
                +-------+--------+---------+--------+-----+--------+---------+----------+----------+
                | 34567 | 356789 > 2345678 > 123456 | 78  | 345678 < 456789  | 12356789 | 23456789 |
                +-------+--------+---------+--------+--v--+--------+----v----+----------+----------+
                | 4567  |  5678  >  34567  |  1345  | !2  | 345678 | 1345678 | 1356789  | 3456789  |
                +---v---+---^----+----v----+---^----+-----+--------+---------+----------+----------+
                | 3456  |  6789  | 123456  |   56   > 45  >   34   |  12789  | 12356789 | 23456789 |
                +-------+--------+---------+---^----+--^--+--------+---------+----------+----------+
                |  !9   |  2356  <  34568  |   #7   > 56  |   !1   <  23456  <   568    >   3456   |
                +-------+---v----+----^----+--------+-----+--------+---------+----^-----+----v-----+
                | 34567 |  123   | 456789  | 12345  < 456 <  567   <  6789   |   6789   |   2345   |
                +-------+---^----+---------+--------+--v--+---^----+---------+----------+----------+
                |  #2   |   !4   <  5678   |   !9   | !3  |   78   >   67    >    56    >    !1    |
                +-------+--------+----^----+--------+--v--+--------+---------+----^-----+----------+
                | 34567 <  5679  |   679   |   !8   | !1  |   !2   < 345679  |   679    |  345679  |
                +-------+---v----+---------+--------+-----+--------+---------+----------+----v-----+
                |  !1   < 235678 |  2345   <  3456  < 78  |   !9   >   678   >   567    | 2345678  |
                +-------+--------+----v----+--------+--^--+--------+---------+----v-----+----------+
                |  #8   | 123567 |   123   <  2356  | !9  |  3567  |   123   <    #4    |  23567   |
                +-------+--------+---------+--------+-----+--------+---------+----------+----------+`
      );
    });

    it('should eliminate candidate quad from column on the board', () => {
      const { provider, board } = createHintProviderForBoard(`
                +-------+---------+---------+-------+---------+---------+-------+
                |  567  | 1234567 | 1234567 | 12367 | 123456  < 234567  | 12346 |
                +---v---+---------+---------+-------+---------+---------+---^---+
                |  456  >  2345   >  1234   | 12367 | 1234567 | 1234567 | 23467 |
                +-------+---------+---------+-------+---------+---------+-------+
                |  #3   >   12    |  24567  >  126  |  24567  >  12456  | 12467 |
                +---v---+---------+---------+-------+---------+---------+-------+
                |  12   | 123567  |   123   <  #4   | 123567  | 123567  | 12367 |
                +-------+---------+---------+-------+---------+---------+-------+
                | 12467 |  3467   | 123467  | 12367 | 123467  |   67    >  #5   |
                +-------+----v----+---------+-------+---------+---------+---v---+
                |  124  <  2346   |   34    <  #5   | 123467  | 123467  | 1234  |
                +-------+---------+----v----+-------+---------+---------+-------+
                | 12456 < 234567  |   23    >  12   | 1234567 | 123456  < 23467 |
                +-------+---------+---------+-------+---------+---------+-------+`);

      const hasChanges = provider.runAtBoard();

      expect(hasChanges).toBeTruthy();
      expect(provider.explanationText).toBe(`Naked quad (1,2,3,4) in cells (B3,D3,F3,G3) eliminated 1,2,3,4 from 3 other cells in that column.`);
      expectBoard(
        board,
        `
                +-------+---------+------+-------+---------+---------+-------+
                |  567  | 1234567 | 567  | 12367 | 123456  < 234567  | 12346 |
                +---v---+---------+------+-------+---------+---------+---^---+
                |  456  >  2345   > 1234 | 12367 | 1234567 | 1234567 | 23467 |
                +-------+---------+------+-------+---------+---------+-------+
                |  #3   >   12    | 567  >  126  |  24567  >  12456  | 12467 |
                +---v---+---------+------+-------+---------+---------+-------+
                |  12   | 123567  | 123  <  #4   | 123567  | 123567  | 12367 |
                +-------+---------+------+-------+---------+---------+-------+
                | 12467 |  3467   |  67  | 12367 | 123467  |   67    >  #5   |
                +-------+----v----+------+-------+---------+---------+---v---+
                |  124  <  2346   |  34  <  #5   | 123467  | 123467  | 1234  |
                +-------+---------+--v---+-------+---------+---------+-------+
                | 12456 < 234567  |  23  >  12   | 1234567 | 123456  < 23467 |
                +-------+---------+------+-------+---------+---------+-------+`
      );
    });

    it('should eliminate candidate quad from column in single cell', () => {
      const { provider, board } = createHintProviderForBoard(`
                +-------+---------+---------+-------+---------+---------+-------+
                |  567  | 1234567 | 1234567 | 12367 | 123456  < 234567  | 12346 |
                +---v---+---------+---------+-------+---------+---------+---^---+
                |  456  >  2345   >  1234   | 12367 | 1234567 | 1234567 | 23467 |
                +-------+---------+---------+-------+---------+---------+-------+
                |  #3   >   12    |  24567  >  126  |  24567  >  12456  | 12467 |
                +---v---+---------+---------+-------+---------+---------+-------+
                |  12   | 123567  |   123   <  #4   | 123567  | 123567  | 12367 |
                +-------+---------+---------+-------+---------+---------+-------+
                | 12467 |  3467   | 123467  | 12367 | 123467  |   67    >  #5   |
                +-------+----v----+---------+-------+---------+---------+---v---+
                |  124  <  2346   |   34    <  #5   | 123467  | 123467  | 1234  |
                +-------+---------+----v----+-------+---------+---------+-------+
                | 12456 < 234567  |   23    >  12   | 1234567 | 123456  < 23467 |
                +-------+---------+---------+-------+---------+---------+-------+`);

      const hasChanges = provider.runAtCoordinate(Coordinate.fromText('C3', board.size));

      expect(hasChanges).toBeTruthy();
      expect(provider.explanationText).toBe(`Naked quad (1,2,3,4) in cells (B3,D3,F3,G3) eliminated 1,2,3,4 from C3.`);
      expectBoard(
        board,
        `
                +-------+---------+---------+-------+---------+---------+-------+
                |  567  | 1234567 | 1234567 | 12367 | 123456  < 234567  | 12346 |
                +---v---+---------+---------+-------+---------+---------+---^---+
                |  456  >  2345   >  1234   | 12367 | 1234567 | 1234567 | 23467 |
                +-------+---------+---------+-------+---------+---------+-------+
                |  #3   >   12    |   567   >  126  |  24567  >  12456  | 12467 |
                +---v---+---------+---------+-------+---------+---------+-------+
                |  12   | 123567  |   123   <  #4   | 123567  | 123567  | 12367 |
                +-------+---------+---------+-------+---------+---------+-------+
                | 12467 |  3467   | 123467  | 12367 | 123467  |   67    >  #5   |
                +-------+----v----+---------+-------+---------+---------+---v---+
                |  124  <  2346   |   34    <  #5   | 123467  | 123467  | 1234  |
                +-------+---------+----v----+-------+---------+---------+-------+
                | 12456 < 234567  |   23    >  12   | 1234567 | 123456  < 23467 |
                +-------+---------+---------+-------+---------+---------+-------+`
      );
    });
  });

  function createHintProviderForBoard(boardText: string): { provider: HintProvider; board: Board } {
    const converter = new BoardTextConverter();
    const board = converter.textToBoard(boardText);
    return {
      provider: new HintProvider(board),
      board: board
    };
  }
});
